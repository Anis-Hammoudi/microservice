version: '3.8'

services:
  # Base de données pour Order Service
  postgres-orders:
    image: postgres:15
    container_name: pg-orders
    environment:
      POSTGRES_DB: orders
      POSTGRES_USER: postgress
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - pgdata-orders:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgress"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Base de données pour Kitchen Service
  postgres-kitchen:
    image: postgres:15
    container_name: pg-kitchen
    environment:
      POSTGRES_DB: kitchen
      POSTGRES_USER: postgress
      POSTGRES_PASSWORD: admin
    ports:
      - "5433:5432"
    volumes:
      - pgdata-kitchen:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgress"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Base de données pour Delivery Service
  postgres-delivery:
    image: postgres:15
    container_name: pg-delivery
    environment:
      POSTGRES_DB: delivery
      POSTGRES_USER: postgress
      POSTGRES_PASSWORD: admin
    ports:
      - "5434:5432"
    volumes:
      - pgdata-delivery:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgress"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Base de données pour Auth Service
  postgres-auth:
    image: postgres:15
    container_name: pg-auth
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgress
      POSTGRES_PASSWORD: admin
    ports:
      - "5435:5432"
    volumes:
      - pgdata-auth:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgress"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  auth-service:
    build:
      context: ./AuthService
      dockerfile: Dockerfile
    container_name: auth-service
    depends_on:
      postgres-auth:
        condition: service_healthy
    ports:
      - "8084:8084"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-auth:5432/auth_db
    restart: unless-stopped

  order-service:
    build: 
      context: ./orderService
      dockerfile: Dockerfile
    container_name: order-service
    depends_on:
      postgres-orders:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_started
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-orders:5432/orders
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - AUTH_SERVICE_URL=http://auth-service:8084/auth
    restart: unless-stopped

  kitchen-service:
    build:
      context: ./kitchenService
      dockerfile: Dockerfile
    container_name: kitchen-service
    depends_on:
      postgres-kitchen:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-kitchen:5432/kitchen
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    restart: unless-stopped

  delivery-service:
    build:
      context: ./DeliveryService
      dockerfile: Dockerfile
    container_name: delivery-service
    depends_on:
      postgres-delivery:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-delivery:5432/delivery
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    restart: unless-stopped

volumes:
  pgdata-orders:
  pgdata-kitchen:
  pgdata-delivery:
  pgdata-auth: 